COMENTAKI 

1: Instalar React : npx create-react-app <nome do projeto>

2: Instalar dependecia firebase: npm install firebase

3: No console em firebase.com add novo projeto, escolher web criar apelido,  em seguida clicar na engrenagem, configurações do projeto

4:  Em configurações SDK copiar a função gerada: firebaseConfig={} 

5: Criar em src firebase.js e colar a função firebaseConfig= {} E exportar pra ser usada em outros lugares da aplicação

6: escolher Realtime data base e iniciar modo teste, passar valores, em seguida configura App.js pra receber os dados no frontend 


USEEFFECT PRA LIMPAR A CONEXÃO COM FIREBASE

7: Em App.js criar um useState: visible pra passar dentro de um evento onClick no <button> pra quando clicar no botão renderizar o conteudo ou não!



CUSTOM HOOK PRA CARREGAR DADOS DO FIREBASE

8: criar um parametro "ENDPOINT" na função que carrega o useEFFECT  passar esse parmentro como ref(endpoint)e tambem na dependencia do useEffect [endpoint]

9: Em seguida estanciar uma função ternária e passala como parametro da função que carrega o useEFFECT passanod o test ou test/a que são os caminhos dos dados do firebase na nuvem


CRIANDO NOVO ITEM NO FIREBASE

10:criar uma função useDatabasePush() com endpoint, e dentro dela um useState status, setStatus e dentro dela passar a função save com o PUSH , em seguida passar o save com os valores a serem adicionados no evento onclick 

ORGANIZANDO E RENDERIZANDO OS COMENTARIOS

11: 
passar o endereço 'comments' const [, save] = useDatabasePush('comments')
em seguida passar o objeto a ser salvo  dentro do save

12: criar componete Comment abstraindo comment  e e retornando esse componente dentro do ids.map() <Comment key={id} comment={data[id]}/>
OBS: sempre o vetor [] dentro do .map() vai se referir aos idS da aplicação

CRIANDO NOVO COMENTARIO

13:Criar novo componeete NewComment e nepor por o  save useDatabasePush, e criar um useState comment, setComment

14: Cria no JSX um <textarea>  passanto o value: commnet e um evento onChange com setComment retornando o que for digitado


ADD DATA TIMESTAMP
15: adicionar:createdAt:firebase.database.ServerValue.TIMESTAMP 
ao save, pra salvar o rotulo de tempo dentro do comentáro

16: Criar componete Time passando o parametro timestamp dinamicamente e dentro dele estanciar  um new Date() e tambem gethours, getminutes, getseconds, getday, getMonth, getFullYear. dar um return com template string retornando tudo


AUTENTICAÇÃO

17: em firebase.com / authentication/ Método de login: Ativar email/senha

18:EM firebase.js import auth, em seguida em App.js criaro metodo createUserWithEmailAndPassord pra criar novo usuário de autenticação

19: Cria metodo onAuthStateChanged pra atualizar esse usuario


ORGANIZANDO O PROJETO:

20: Separar os componetes por arquivos e exportar e importar pra seus respectivos


USANDO CONTEXT API PRA AUTENTICÃO

21: criar auth.js estanciar o o context: 
export const AuthContext = React.createContext()

22: criar o componente AuthProvider passando a depedencia {children} e dar u wrap com <AuthContext.Provider value={{ isAuth:1 }}>

22: importar o AuthContext em App.js e envolver(wrap)com o <AuthContext.Provider> JSX do componente App.js, passando o value que será compartilhado com os outros componentes 

23: Agora é só importar o AuthContext no componete que for usar o valor compartilhado no provider